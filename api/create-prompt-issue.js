import { Octokit } from "@octokit/rest";
import { z } from "zod";

// --- –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Zod ---
const PromptSchema = z.object({
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  uuid: z.string().uuid({ message: "Invalid UUID format" }),
  title: z.string().min(1, { message: "Title cannot be empty" }),
  version: z.string().min(1, { message: "Version cannot be empty" }),
  category: z.string().min(1, { message: "Category cannot be empty" }), // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–¥–µ–ª–∞–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
  content: z.object({
    ru: z.string().optional(),
    en: z.string().optional(),
  }).passthrough(),

  // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  type: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  prompt_variants: z.array(
    z.object({
      variant_id: z.object({
        type: z.string(),
        id: z.union([z.string(), z.number()]),
        priority: z.number().optional(),
      }).passthrough(),
      content: z.object({
        ru: z.string().optional(),
        en: z.string().optional(),
      }).passthrough(),
    })
  ).optional(), 
}).passthrough();


/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–æ Issue.
 */
function formatIssueBody(data, filePath) {
    let body = `### üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞\n\n`;
    body += `**–§–∞–π–ª:** \`${filePath}\`\n`;
    body += `**–í–µ—Ä—Å–∏—è:** \`${data.version}\` | **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** \`${data.category}\`\n\n`; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç
    body += `**–û–ø–∏—Å–∞–Ω–∏–µ:**\n> ${data.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;

    if (data.prompt_variants && data.prompt_variants.length > 0) {
        body += `--- \n### ‚ú® –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞ (${data.prompt_variants.length})\n\n`;
        data.prompt_variants.forEach(variant => {
            const { type, id, priority } = variant.variant_id;
            body += `- **–¢–∏–ø:** \`${type}\`, **ID:** \`${id}\``;
            if (priority) {
                body += `, **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** \`${priority}\``;
            }
            body += `\n`;
        });
    }

    body += `\n---\n*–≠—Ç–æ Issue —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏, –≤ —Å–ª—É—á–∞–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É.*`;
    return body;
}


export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }
    try {
        const validationResult = PromptSchema.safeParse(req.body);
        if (!validationResult.success) {
            // ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∫–∞–∫ –±—ã–ª–∞ ...
            return res.status(400).json({ /* ... */ });
        }
        const promptData = validationResult.data;
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        const owner = process.env.GITHUB_REPO_OWNER;
        const repo = process.env.GITHUB_REPO_NAME;
        const mainBranch = process.env.GITHUB_MAIN_BRANCH || 'main'; // –ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–∏

        // --- –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ ---
        const newBranchName = `prompts/add-${promptData.uuid}`;
        const mainBranchRef = await octokit.rest.git.getRef({
            owner, repo, ref: `heads/${mainBranch}`,
        });
        const mainBranchSha = mainBranchRef.data.object.sha;
        await octokit.rest.git.createRef({
            owner, repo, ref: `refs/heads/${newBranchName}`, sha: mainBranchSha,
        });

        // --- –≠—Ç–∞–ø 2: –ö–æ–º–º–∏—Ç —Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É ---
        const filePath = `prompts/${promptData.category}/${promptData.uuid}.json`;
        await octokit.rest.repos.createOrUpdateFileContents({
            owner, repo, path: filePath,
            message: `feat(prompts): add new prompt "${promptData.title}"`,
            content: Buffer.from(JSON.stringify(promptData, null, 2)).toString('base64'),
            branch: newBranchName, // –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
            committer: { name: 'AIPrompts API Bot', email: 'bot@aiprompts.dev' },
        });

        // --- –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ Pull Request ---
        const pr = await octokit.rest.pulls.create({
            owner, repo,
            title: `–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: ${promptData.title}`,
            head: newBranchName, // –û—Ç–∫—É–¥–∞
            base: mainBranch,    // –ö—É–¥–∞
            body: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞. –§–∞–π–ª: \`${filePath}\`.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å–ª–µ–π—Ç–µ (merge) —ç—Ç–æ—Ç Pull Request –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.`,
            maintainer_can_modify: true
        });

        res.status(201).json({ 
            message: 'Pull Request created successfully. Awaiting moderation.',
            pullRequestUrl: pr.data.html_url
        });

    } catch (error) {
        console.error('FATAL: Error in PR creation pipeline:', error);
        res.status(500).json({ message: 'Internal Server Error.' });
    }
}