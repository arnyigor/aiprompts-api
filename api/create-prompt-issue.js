import { Octokit } from "@octokit/rest";
import { z } from "zod";

const PromptSchema = z.object({
    id: z.string().uuid(),
    title: z.string().min(1),
    version: z.string().min(1),
    category: z.string().min(1),
    original_category: z.string().optional(), // –ù–æ–≤–æ–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    description: z.string().optional(),
    content: z.object({
        ru: z.string().optional(),
        en: z.string().optional(),
    }).passthrough(),
    prompt_variants: z.array(
        z.object({
            variant_id: z.object({
                type: z.string().min(1),
                id: z.string().min(1),
                priority: z.number().optional(),
            }),
            content: z.object({ ru: z.string().optional(), en: z.string().optional() }).passthrough(),
        })
    ).optional(),
    compatible_models: z.array(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    variables: z.array(
        z.object({
            name: z.string(),
            description: z.string().optional(),
            default_value: z.string().optional(),
        })
    ).optional(),
    status: z.string(),
    is_local: z.boolean(),
    is_favorite: z.boolean(),
    metadata: z.any(),
    rating: z.any(),
}).passthrough();

function formatPullRequestBody(data, filePath, oldFilePath = null) {
    let body = `### üì• –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${data.title}\n\n`;
    if (oldFilePath) {
        body += `**–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:**\n- ~~${oldFilePath}~~\n- ‚Üí \`${filePath}\`\n\n`;
    } else {
        body += `**–§–∞–π–ª:** \`${filePath}\`\n`;
    }
    body += `**–í–µ—Ä—Å–∏—è:** \`${data.version}\` | **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** \`${data.category}\`\n`;

    if (data.tags && data.tags.length > 0) {
        body += `**–¢–µ–≥–∏:** ${data.tags.map(t => `\`${t}\``).join(', ')}\n`;
    }

    body += `\n---\n\n#### –û–ø–∏—Å–∞–Ω–∏–µ\n`;
    body += `> ${data.description || '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'}\n`;

    if (data.prompt_variants && data.prompt_variants.length > 0) {
        body += `\n---\n\n#### üî¨ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (${data.prompt_variants.length})\n`;
        data.prompt_variants.forEach(variant => {
            const { type, id, priority } = variant.variant_id;
            body += `\n<details>\n`;
            body += `<summary>–í–∞—Ä–∏–∞–Ω—Ç: <strong>${type} = ${id}</strong> (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority || 0})</summary>\n\n`;
            if (variant.content.ru) {
                body += `**RU:**\n\`\`\`\n${variant.content.ru}\n\`\`\`\n`;
            }
            if (variant.content.en) {
                body += `**EN:**\n\`\`\`\n${variant.content.en}\n\`\`\`\n`;
            }
            body += `</details>\n`;
        });
    }

    if (data.variables && data.variables.length > 0) {
        body += `\n---\n\n#### üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (${data.variables.length})\n`;
        data.variables.forEach(variable => {
            body += `- \`${variable.name}\`: ${variable.description || ''} (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: \`${variable.default_value || ''}\`)\n`;
        });
    }

    body += `\n---\n*PR —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–ª–µ–π—Ç–µ (merge) –µ–≥–æ.*`;
    return body;
}

function getTimestampWithoutZ(date) { return date.toISOString().slice(0, -1); }

export default async function handler(req, res) {
    if (req.method !== 'POST') { return res.status(405).end('Method Not Allowed'); }
    try {
        const validationResult = PromptSchema.safeParse(req.body);
        if (!validationResult.success) {
            return res.status(400).json({ error: 'Validation failed', details: validationResult.error.flatten() });
        }

        const incomingData = validationResult.data;
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        const owner = process.env.GITHUB_REPO_OWNER;
        const repo = process.env.GITHUB_REPO_NAME;
        const mainBranch = process.env.GITHUB_MAIN_BRANCH || 'main';
        const committer = { name: 'AIPrompts API Bot', email: 'bot@aiprompts.dev' };

        const { category: newCategory, original_category: oldCategory } = incomingData;
        const isEditing = !!oldCategory;
        const categoryChanged = isEditing && newCategory !== oldCategory;

        const newFilePath = `prompts/${newCategory}/${incomingData.id}.json`;
        const oldFilePath = isEditing ? `prompts/${oldCategory}/${incomingData.id}.json` : null;

        let finalData = { ...incomingData };

        // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–µ
        const mainBranchRef = await octokit.rest.git.getRef({ owner, repo, ref: `heads/${mainBranch}` });
        const lastCommitSha = mainBranchRef.data.object.sha;

        // 2. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ —ç—Ç–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
        const { data: lastCommit } = await octokit.rest.git.getCommit({ owner, repo, commit_sha: lastCommitSha });
        const baseTreeSha = lastCommit.tree.sha;

        // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        const tree = [];

        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ –¥–µ—Ä–µ–≤–∞
        if (categoryChanged) {
            tree.push({
                path: oldFilePath,
                mode: '100644', // file mode
                type: 'blob',
                sha: null, // `null` sha –æ–∑–Ω–∞—á–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ
            });
            // –ë–µ—Ä–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ (–Ω—É–∂–Ω–æ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å)
            try {
                const { data: existingFile } = await octokit.rest.repos.getContent({ owner, repo, path: oldFilePath, ref: mainBranch });
                const oldContent = JSON.parse(Buffer.from(existingFile.content, 'base64').toString('utf-8'));
                finalData.created_at = oldContent.created_at || getTimestampWithoutZ(new Date());
            } catch (e) {
                finalData.created_at = getTimestampWithoutZ(new Date()); // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            }
        } else if (isEditing) {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞–º –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            try {
                const { data: existingFile } = await octokit.rest.repos.getContent({ owner, repo, path: newFilePath, ref: mainBranch });
                const oldContent = JSON.parse(Buffer.from(existingFile.content, 'base64').toString('utf-8'));
                finalData.created_at = oldContent.created_at || getTimestampWithoutZ(new Date());
            } catch (e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º */ }
        } else {
            finalData.created_at = getTimestampWithoutZ(new Date());
        }

        finalData.updated_at = getTimestampWithoutZ(new Date());
        delete finalData.original_category;

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –¥–µ—Ä–µ–≤–æ
        tree.push({
            path: newFilePath,
            mode: '100644',
            type: 'blob',
            content: JSON.stringify(finalData, null, 2),
        });

        // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ GitHub
        const { data: newTree } = await octokit.rest.git.createTree({
            owner, repo, tree, base_tree: baseTreeSha,
        });

        // 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
        const commitMessage = isEditing
            ? `fix(prompts): update prompt "${finalData.title}"`
            : `feat(prompts): add new prompt "${finalData.title}"`;
        const { data: newCommit } = await octokit.rest.git.createCommit({
            owner, repo,
            message: commitMessage,
            tree: newTree.sha,
            parents: [lastCommitSha],
            author: committer,
        });

        // 6. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É, —É–∫–∞–∑—ã–≤–∞—é—â—É—é –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç
        const prTitle = isEditing ? `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: ${finalData.title}` : `–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: ${finalData.title}`;
        const timestamp = Date.now().toString().slice(-6);
        const newBranchName = `prompts/${isEditing ? 'update' : 'add'}-${finalData.id.substring(0, 8)}-${timestamp}`;
        await octokit.rest.git.createRef({ owner, repo, ref: `refs/heads/${newBranchName}`, sha: newCommit.sha });

        // 7. –°–æ–∑–¥–∞–µ–º Pull Request
        const prBody = formatPullRequestBody(finalData, newFilePath, oldFilePath);
        const pr = await octokit.rest.pulls.create({ owner, repo, title: prTitle, head: newBranchName, base: mainBranch, body: prBody });

        res.status(201).json({ message: 'Pull Request created/updated successfully.', pullRequestUrl: pr.data.html_url });

    } catch (error) {
        console.error('FATAL Error:', error.response?.data || error.stack || error);
        res.status(500).json({ error: 'Internal Server Error.', details: error.response?.data || error.message });
    }
}