import { Octokit } from "@octokit/rest";
import { z } from "zod";

// --- –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Zod ---
const PromptSchema = z.object({
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  uuid: z.string().uuid({ message: "Invalid UUID format" }),
  title: z.string().min(1, { message: "Title cannot be empty" }),
  version: z.string().min(1, { message: "Version cannot be empty" }),
  category: z.string().min(1, { message: "Category cannot be empty" }), // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–¥–µ–ª–∞–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
  content: z.object({
    ru: z.string().optional(),
    en: z.string().optional(),
  }).passthrough(),

  // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  type: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  prompt_variants: z.array(
    z.object({
      variant_id: z.object({
        type: z.string(),
        id: z.union([z.string(), z.number()]),
        priority: z.number().optional(),
      }).passthrough(),
      content: z.object({
        ru: z.string().optional(),
        en: z.string().optional(),
      }).passthrough(),
    })
  ).optional(), 
}).passthrough();


/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–æ Issue.
 */
function formatIssueBody(data, filePath) {
    let body = `### üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞\n\n`;
    body += `**–§–∞–π–ª:** \`${filePath}\`\n`;
    body += `**–í–µ—Ä—Å–∏—è:** \`${data.version}\` | **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** \`${data.category}\`\n\n`; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç
    body += `**–û–ø–∏—Å–∞–Ω–∏–µ:**\n> ${data.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;

    if (data.prompt_variants && data.prompt_variants.length > 0) {
        body += `--- \n### ‚ú® –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–∞ (${data.prompt_variants.length})\n\n`;
        data.prompt_variants.forEach(variant => {
            const { type, id, priority } = variant.variant_id;
            body += `- **–¢–∏–ø:** \`${type}\`, **ID:** \`${id}\``;
            if (priority) {
                body += `, **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** \`${priority}\``;
            }
            body += `\n`;
        });
    }

    body += `\n---\n*–≠—Ç–æ Issue —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏, –≤ —Å–ª—É—á–∞–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É.*`;
    return body;
}


export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }

    try {
        // –≠—Ç–∞–ø 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Zod
        const validationResult = PromptSchema.safeParse(req.body);
        if (!validationResult.success) {
            const formattedErrors = validationResult.error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join('; ');
            return res.status(400).json({ message: `Bad Request: Invalid data structure. Details: ${formattedErrors}` });
        }
        const promptData = validationResult.data;

        // –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        const owner = process.env.GITHUB_REPO_OWNER;
        const repo = process.env.GITHUB_REPO_NAME;

        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const category = promptData.category;
        const fileName = `${promptData.uuid}.json`;
        const filePath = `prompts/${category}/${fileName}`;
        
        const fileContent = JSON.stringify(promptData, null, 2);
        const contentEncoded = Buffer.from(fileContent).toString('base64');

        // --- –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç ---
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
        try {
            // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —É–ø–∞–¥–µ—Ç —Å –æ—à–∏–±–∫–æ–π 404, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∏ –≤–µ—Ä–Ω–µ—Ç –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
            await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {
                owner,
                repo,
                path: filePath,
            });
            // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–¥–∞–µ–º –æ—à–∏–±–∫—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.
            return res.status(409).json({ message: 'Conflict: A prompt with this UUID already exists.' });

        } catch (error) {
            // –û—à–∏–±–∫–∞ 404 - —ç—Ç–æ –•–û–†–û–®–ê–Ø –æ—à–∏–±–∫–∞. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏ –º—ã –º–æ–∂–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å.
            if (error.status !== 404) {
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500 –æ—Ç GitHub), –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ –¥–∞–ª—å—à–µ.
                throw error;
            }
        }

        // –ï—Å–ª–∏ –º—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É (–ø–æ–ª—É—á–∏–ª–∏ 404), —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª.
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞: createOrUpdateFileContents
        await octokit.repos.createOrUpdateFileContents({
            owner,
            repo,
            path: filePath,
            message: `feat(prompts): add new prompt "${promptData.title}"`,
            content: contentEncoded,
            committer: {
                name: 'AIPrompts API Bot',
                email: 'bot@aiprompts.dev'
            },
        });

        // –≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ Workflow
        const issueBody = formatIssueBody(promptData, filePath);
        await octokit.repos.createDispatchEvent({
            owner,
            repo,
            event_type: 'create-moderation-issue',
            client_payload: {
                title: promptData.title,
                body: issueBody 
            }
        });

        res.status(202).json({ message: 'Accepted: Prompt submitted and is awaiting moderation.' });

    } catch (error) {
        console.error('FATAL: Error in processing pipeline:', error);
        res.status(500).json({ message: 'Internal Server Error. Please contact support.' });
    }
}