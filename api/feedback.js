// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch, –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö Node.js –Ω–∞ Vercel
export default async function handler(req, res) {
  // --- –§–ò–ù–ê–õ–¨–ù–´–ô –ë–õ–û–ö –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò v2 ---

  const allowedOrigins = [
    'https://aipromptsapi.vercel.app',
    'https://www.aipromptsapi.vercel.app'
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é VERCEL_ENV, –∫–æ—Ç–æ—Ä—É—é vercel dev —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤ 'development'
  if (process.env.VERCEL_ENV === 'development') {
    allowedOrigins.push('http://localhost:3000');
  }

  const origin = req.headers['origin'];
  const clientApiKey = req.headers['x-api-key'];

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ origin —Ä–∞–∑—Ä–µ—à–µ–Ω
  if (origin && allowedOrigins.includes(origin)) {
    res.setHeader('Access-Control-Allow-Origin', origin);
  }

  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-API-Key');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  if (!allowedOrigins.includes(origin) && clientApiKey !== process.env.API_SECRET_KEY) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª–µ–∑–Ω—ã–π –ª–æ–≥ –Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–∞–ª—å–Ω–æ–π –∞—Ç–∞–∫–∏
    console.warn(`[SECURITY] Unauthorized access attempt from origin: ${origin || 'unknown'}.`);
    return res.status(401).json({ error: 'Unauthorized' });
  }
  // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ---

  if (req.method !== 'POST') {
    return res.status(405).end('Method Not Allowed');
  }

  try {
    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { appname, content } = req.body;

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!appname || !content) {
      return res.status(400).json({ error: 'Missing required fields: appname and content' });
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    if (!botToken || !chatId) {
      console.error('Telegram secrets are not configured!');
      return res.status(500).json({ error: 'Server configuration error.' });
    }

    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    let messageText = `üîî *–ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫!*\n\n`;
    messageText += `*–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:* \`${appname.name} (v${appname.version}, ID: ${appname.id}, Pkg: ${appname.packagename})\`\n`;
    messageText += `*–í—Ä–µ–º—è:* \`${timestamp}\`\n\n`;
    messageText += `*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*\n${content}`;

    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API
    const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const telegramResponse = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: messageText,
        parse_mode: 'Markdown', // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      }),
    });

    const telegramResult = await telegramResponse.json();

    if (!telegramResult.ok) {
      // –ï—Å–ª–∏ Telegram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
      console.error('Telegram API Error:', telegramResult.description);
      return res.status(500).json({ error: 'Failed to send message to Telegram.' });
    }

    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    return res.status(200).json({ message: 'Feedback sent successfully!' });

  } catch (error) {
    console.error('Internal Server Error:', error);
    return res.status(500).json({ error: 'An unexpected error occurred.' });
  }
}
